import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.UIManager;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;


import org.apache.commons.io.FileUtils;
import org.basex.core.BaseXException;
import org.basex.examples.local.RunQueries;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.select.Elements;


import us.codecraft.xsoup.XElements;
import us.codecraft.xsoup.Xsoup;
/*
 * This Java source file was generated by the Gradle 'init' task.
 */

public class MainClass extends JPanel implements TreeSelectionListener, ActionListener, KeyListener {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private JEditorPane htmlPane;
	private JTree tree;
	JEditorPane jep;
	JButton xPathSearchButton, webSiteSearchButton, xQuerySearchButton;
	private JTextField webSiteSearchField, propertyField, xPathSearchField, xQuerySearchField;
	private JTable xPathSearchResultTable;
	private DefaultMutableTreeNode htmlTreeNode;
	// public static String url = "https://example.com/";
	public static String url = "http://www.vatanbilgisayar.com/webeozel-urunler/akilli-telefon/";

	private JFrame frame;
	private Document doc;

	// Optionally play with line styles. Possible values are
	// "Angled" (the default), "Horizontal", and "None".

	public Document getDoc() {
		return doc;
	}

	public void setDoc(Document doc) {
		this.doc = doc;
	}

	// Optionally set the look and feel.
	private static boolean useSystemLookAndFeel = false;

	public boolean someLibraryMethod() {

		return true;
	}

	public static void main(String[] args) throws Exception {

		// Schedule a job for the event dispatch thread:
		// creating and showing this application's GUI.
		javax.swing.SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
				MainClass l = new MainClass();
				l.setDoc(l.getPage(url));
				l.createAndShowGUI(l.getDoc());
			}
		});

	}

	public Document getPage(String url) {

		try {
			Document doc = Jsoup.connect(url).get();
			String title = doc.title();
			System.out.println(title);
			String result = Xsoup.compile("//a/@href").evaluate(doc).get();
			System.out.println(result);
			return doc;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}

	}

	private static String htmlTags(Document doc) {
		StringBuilder sb = new StringBuilder();
		htmlTags(doc.body().children(), sb);
		return sb.toString();
	}

	private static void htmlTags(Elements elements, StringBuilder sb) {
		for (Element el : elements) {
			if (sb.length() > 0) {
				sb.append(",");
			}
			sb.append(el.nodeName());
			htmlTags(el.children(), sb);
			sb.append(",").append(el.nodeName());
		}
	}

	/**
	 * Create the GUI and show it. For thread safety, this method should be
	 * invoked from the event dispatch thread.
	 */
	private void createAndShowGUI(Document doc) {
		if (useSystemLookAndFeel) {
			try {
				UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
			} catch (Exception e) {
				System.err.println("Couldn't use system look and feel.");
			}
		}

		// Create and set up the window.
		frame = new JFrame("Web Scrapper");

		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		// Create the nodes.
		htmlTreeNode = new DefaultMutableTreeNode("The HTML Tree");
		createNodes(htmlTreeNode, doc, "0", "");
		// Create a tree that allows one selection at a time.
		createTreeWithTreeNode(htmlTreeNode);
		setLayout(new BoxLayout(this, BoxLayout.PAGE_AXIS));

		// Add content to the window.
		frame.add(this);

		// Display the window.
		frame.pack();
		// frame.pack();
		frame.setVisible(true);
	}

	public enum ElementType {
		TABLE, UNORDEREDLIST, ORDEREDLIST, SET, TREE
	};

	private void createTreeWithTreeNode(DefaultMutableTreeNode top) {
		JLabel webSiteSearchLabel = new JLabel("Web Site:");
		webSiteSearchField = new JTextField("								");
		webSiteSearchField.setToolTipText("Enter website to parse");
		webSiteSearchField.setText(url);
		webSiteSearchField.addKeyListener(this);
		webSiteSearchButton = new JButton("Enter");
		webSiteSearchButton.addActionListener(this);
		JPanel webSiteSearchPanel = new JPanel();
		webSiteSearchPanel.add(webSiteSearchLabel);
		webSiteSearchPanel.add(webSiteSearchField);
		webSiteSearchPanel.add(webSiteSearchButton);
		tree = new JTree(top);
		tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

		// Listen for when the selection changes.
		tree.addTreeSelectionListener(this);

		// Create the scroll pane and add the tree to it.
		JScrollPane treeView = new JScrollPane(tree);

		// Create the HTML viewing pane.
		htmlPane = new JEditorPane();
		htmlPane.setEditable(false);

		JScrollPane htmlView = new JScrollPane(htmlPane);

		// Add the scroll panes to a split pane.
		JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
		splitPane.setTopComponent(treeView);
		splitPane.setBottomComponent(htmlView);
		splitPane.setSize(500, 300);
		Dimension minimumSize = new Dimension(700, 300);
		htmlView.setMinimumSize(minimumSize);
		treeView.setMinimumSize(minimumSize);
		splitPane.setDividerLocation(500);
		// splitPane.setMinimumSize(new Dimension(1200, 300));
		splitPane.setPreferredSize(new Dimension(1200, 300));
		JLabel propertyLabel = new JLabel("Element Properties:");
		propertyField = new JTextField("");
		propertyField.setToolTipText("Element Properties");
		propertyField.setPreferredSize(new Dimension(500, 25));
		JPanel propertyPanel = new JPanel();
		propertyPanel.add(propertyLabel);
		propertyPanel.add(propertyField);

		JLabel xPathSearchLabel = new JLabel("Search XPath:");
		xPathSearchField = new JTextField("");
		xPathSearchField.setPreferredSize(new Dimension(500, 25));
		xPathSearchField.addKeyListener(this);

		xPathSearchButton = new JButton("Search");
		xPathSearchButton.addActionListener(this);

		JLabel xQuerySearchLabel = new JLabel("Search XQuery:");
		xQuerySearchField = new JTextField("");
		xQuerySearchField.setPreferredSize(new Dimension(500, 25));
		xQuerySearchField.addKeyListener(this);

		xQuerySearchButton = new JButton("Search");
		xQuerySearchButton.addActionListener(this);

		String[] columnNames = { "Tag Name", "Class Name", "Text" };
		Object[][] data = { { " ", " ", "" }, { " ", " ", "" }, { " ", " ", "" }, { " ", " ", "" }, { " ", " ", "" }, };
		xPathSearchResultTable = new JTable(10, 3);
		DefaultTableModel contactTableModel = (DefaultTableModel) xPathSearchResultTable.getModel();
		contactTableModel.setColumnIdentifiers(columnNames);
		JScrollPane xPathTablescrollPane = new JScrollPane(xPathSearchResultTable);
		xPathTablescrollPane.setPreferredSize(new Dimension(1200, 100));
		xPathSearchResultTable.setFillsViewportHeight(true);

		JPanel xPathSearchPanel = new JPanel();
		xPathSearchPanel.add(xPathSearchLabel);
		xPathSearchPanel.add(xPathSearchField);
		xPathSearchPanel.add(xPathSearchButton);

		JPanel xQuerySearchPanel = new JPanel();
		xQuerySearchPanel.add(xQuerySearchLabel);
		xQuerySearchPanel.add(xQuerySearchField);
		xQuerySearchPanel.add(xQuerySearchButton);

		// Add the split pane to this panel.
		add(webSiteSearchPanel);
		add(splitPane);
		add(propertyPanel);
		add(xPathSearchPanel);
		add(xQuerySearchPanel);
		add(xPathTablescrollPane);
		jep = new JEditorPane();
		// add an html editor kit
		/*
		 * HTMLEditorKit kit = new HTMLEditorKit(); jep.setEditorKit(kit);
		 * 
		 * // add some styles to the html StyleSheet styleSheet =
		 * kit.getStyleSheet(); styleSheet.
		 * addRule("body {color:#000; font-family:times; margin: 4px; }");
		 * styleSheet.addRule("h1 {color: blue;}");
		 * styleSheet.addRule("h2 {color: #ff0000;}"); styleSheet.
		 * addRule("pre {font : 10px monaco; color : black; background-color : #fafafa; }"
		 * ); // create a document, set it on the jeditorpane, then add the html
		 * javax.swing.text.Document docu = kit.createDefaultDocument();
		 * jep.setDocument(docu);
		 */
		jep.setEditable(false);
		jep.setPreferredSize(new Dimension(1200, 300));
		jep.setContentType("text/html");
		// jep.setText("<html>Select Element to View</html>");

		JScrollPane scrollPane = new JScrollPane(jep);
		// add(scrollPane);
	}

	private void createNodes(DefaultMutableTreeNode top, Node doc, String positionStr, String xPathStr) {
		DefaultMutableTreeNode internalNode = null;

		List<Node> childNodes = doc.childNodes();
		int position = 0;
		for (Node childNode : childNodes) {

			String childPositionStr = positionStr + "-" + position;
			String childXPathStr = xPathStr + "/" + childNode.nodeName();
			String childName = childNode.nodeName();
			if (childNode.attr("id") != null && childNode.attr("id").length() > 0)
				childName += "-" + childNode.attr("id");
			if (childNode.attr("class") != null && childNode.attr("class").length() > 0) {
				childName += ":" + childNode.attr("class");
			}
			if (doc.attr("class") != null && doc.attr("class").length() > 0) {
				childName += "<" + doc.attr("class");
			}
			ElementInfo currentElementInfo = new ElementInfo(childName, childNode.toString(), childPositionStr,
					childNode.attr("class"), doc.attr("class"), childXPathStr);
			if (childNode.childNodeSize() > 0) {
				currentElementInfo.setIsLeaf(false);
				internalNode = new DefaultMutableTreeNode(currentElementInfo);

				createNodes(internalNode, childNode, childPositionStr, childXPathStr);
			} else {
				currentElementInfo.setIsLeaf(true);
				internalNode = new DefaultMutableTreeNode(currentElementInfo);
			}
			top.add(internalNode);
			position++;
		}
	}

	@Override
	public void valueChanged(TreeSelectionEvent e) {
		DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();

		if (node == null)
			return;

		Object nodeInfo = node.getUserObject();
		ElementInfo element = (ElementInfo) nodeInfo;

		htmlPane.setText(element.elementText);
		propertyField.setText("Pos:" + element.getElementPosition() + ", Xpath:" + element.getElementXPath());
		// jep.setText(element.elementText);

	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// Schedule a job for the event dispatch thread:
		// creating and showing this application's GUI.
		if (e.getSource().equals(webSiteSearchButton)) {
			searchWebSite();
		} else if (e.getSource().equals(xPathSearchButton)) {
			searchXPath();
		} else if (e.getSource().equals(xQuerySearchButton)) {
			searchXQuery();
		}

	}

	private void searchWebSite() {
		javax.swing.SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {

				String url = webSiteSearchField.getText();
				doc = getPage(url);
				DefaultTreeModel model = (DefaultTreeModel) tree.getModel();
				DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
				root.removeAllChildren();
				createNodes(root, doc, "0", "");
				model.reload(root);
				frame.revalidate();
				propertyField.setText("");
				jep.setText(doc.html());

			}
		});
	}

	private class ElementInfo {
		private String elementName;
		private String elementText;
		private String elementPosition;
		private String elementClass;
		private String elementParentClass;
		private String elementXPath;
		private boolean isLeaf;
		private ElementType type;

		public ElementInfo(String element, String elementText, String elementPosition, String elementClass,
				String parentClass, String elementXPath) {
			this.elementName = element;
			this.elementText = elementText;
			this.elementPosition = elementPosition;
			this.elementXPath = elementXPath;
			this.setElementClass(elementClass);
			this.setElementParentClass(parentClass);

		}

		public void setIsLeaf(boolean isLeafPr) {
			isLeaf = isLeafPr;
		}

		public boolean isLeaf() {
			return isLeaf;
		}

		public void setElementType(ElementType type) {
			this.type = type;
		}

		public ElementType getElementType() {
			return type;
		}

		public String getElementPosition() {
			return elementPosition;
		}

		public String toFullString() {
			return "ElementInfo [elementName=" + elementName + ", elementText=" + elementText + ", elementPosition="
					+ elementPosition + ", elementClass=" + elementClass + ", elementParentClass=" + elementParentClass
					+ ", elementXPath=" + elementXPath + ", isLeaf=" + isLeaf + ", type=" + type + "]";
		}

		@Override
		public String toString() {
			return elementName;
		}

		public String getElementClass() {
			return elementClass;
		}

		public void setElementClass(String elementClass) {
			this.elementClass = elementClass;
		}

		public String getElementParentClass() {
			return elementParentClass;
		}

		public void setElementParentClass(String elementParentClass) {
			this.elementParentClass = elementParentClass;
		}

		public String getElementXPath() {
			return elementXPath;
		}

		public void setElementXPath(String elementXPath) {
			this.elementXPath = elementXPath;
		}

	}

	private class DataElement {
		private String elementStartLoc;
		private String elementEndLoc;
		private String elementHtml;
		private String className;
		private ElementType type;

		public String getTableEndLoc() {
			return elementEndLoc;
		}

		public void setElementEndLoc(String tableEndLoc) {
			this.elementEndLoc = tableEndLoc;
		}

		public String getElementHtml() {
			return elementHtml;
		}

		public void setTableHtml(String tableHtml) {
			this.elementHtml = tableHtml;
		}

		public String getClassName() {
			return className;
		}

		public void setClassName(String className) {
			this.className = className;
		}

		public String getElementStartLoc() {
			return elementStartLoc;
		}

		public void setElementStartLoc(String tableStartLoc) {
			this.elementStartLoc = tableStartLoc;
		}

		public ElementType getType() {
			return type;
		}

		public void setType(ElementType type) {
			this.type = type;
		}
	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyPressed(KeyEvent e) {
		if (e.getKeyCode() == KeyEvent.VK_ENTER) {
			if (e.getSource().equals(webSiteSearchField)) {
				this.searchWebSite();
			} else if (e.getSource().equals(xPathSearchField)) {
				searchXPath();
			}
		}
		// Enter was pressed. Your code goes here.
	}

	private void searchXPath() {
		String expression = xPathSearchField.getText();
		System.out.println("Search xPath...");
		XElements evaluate = Xsoup.compile(expression).evaluate(doc);
		Iterator<Element> iterator = evaluate.getElements().iterator();

		String resultStr = "";

		DefaultTableModel model = (DefaultTableModel) xPathSearchResultTable.getModel();
		model.setRowCount(0);

		while (iterator.hasNext()) {
			String[] rowData = new String[3];
			Element next = iterator.next();
			rowData[0] = next.tagName();
			rowData[1] = next.className();
			rowData[2] = next.text();
			model.addRow(rowData);
		}
		htmlPane.setText(resultStr);
		// xPathSearchResultTable.
		model.fireTableDataChanged();

		/*
		 * XPath xpath = XPathFactory.newInstance().newXPath(); String
		 * expression = xPathSearchField.getText(); W3CDom w3cDom = new
		 * W3CDom(); org.w3c.dom.Document w3cDoc = w3cDom.fromJsoup(doc);
		 * 
		 * try { String xml = "<foo><bar/><bar/><bar/></foo>"; InputSource
		 * inputSource; //inputSource = new InputSource(new
		 * ByteArrayInputStream(xml.getBytes("utf-8")));
		 * 
		 * NodeList nodes = (NodeList) xpath.evaluate(expression, inputSource,
		 * XPathConstants.NODESET); System.out.println(nodes.getLength()); }
		 * catch (XPathExpressionException e1) { // TODO Auto-generated catch
		 * block e1.printStackTrace(); } catch (UnsupportedEncodingException e)
		 * { // TODO Auto-generated catch block e.printStackTrace(); }
		 */
	}

	public String parserXHtml(String html) {
		org.jsoup.nodes.Document document = Jsoup.parseBodyFragment(html);
		document.outputSettings().syntax(org.jsoup.nodes.Document.OutputSettings.Syntax.xml); // This
																								// will
																								// ensure
																								// the
																								// validity
		document.outputSettings().charset("UTF-8");
		return document.toString();
	}

	private void searchXQuery() {
		String expression = xQuerySearchField.getText();
		System.out.println("Search xQuery...:" + expression);
		// HtmlParser parser=new HtmlParser();
		// parser.c
		String xml = parserXHtml(doc.html());
		try {
			FileUtils.writeStringToFile(new File("vatan.xml"), xml, "UTF-8");
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		try {
			String query = "for $book in fn:doc(\"vatan.xml\")/books/book\n"
					+ " where xs:decimal($book/price) gt 10.00\n" + " return\n" + "  $book/title";
			RunQueries.query(query);


		} catch (BaseXException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub

	}

}
